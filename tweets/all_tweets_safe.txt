vi is short for VIsual editor
ZZ - save the file and exit
:e! returns to the last saved version of your file
:q! quits without saving
vi has two modes: insert mode and command mode
i enters insert mode from command mode
esc enters command mode from insert mode
h moves the cursor left by one
j moves the cursor down by one
k moves the cursor up by one
l moves the cursor right by one
+ moves the cursor down by one
- moves the cursor up by one
alternatively to using h, j, k, and l to move the cursor, you can use the arrow keys
precede a command with a numeric argument to repeat it some number of times. For example, the command nh will move the cursor n positions to the left
0 moves the cursor to the beginning of the current line
$ moves the cursor to the end of the current line
w moves the cursor to the start of the next word. Note that punctuation marks count as their own word!
W moves the cursor to the start of the next word, ignoring punctuation marks
b moves the cursor to the previous word. Note that punctuation marks count as their own word!
B moves the cursor to the previous word, ignoring punctuation marks
nG moves the cursor to the beginning of the nth line. If no numeric argument is provided, G will move the cursor to the last line
You can delete text using the d command combined with another command and numeric argument. For example, dw will delete the current word. d3w will delete the current word and the next two words
You can yank (copy) text using the y command combined with a command and numeric argument. For example, y$ will copy the text from the cursor position to the end of the current line
You can put (paste) text using the p command. p puts the text in your buffer after the cursor position. P puts the text in your buffer before the cursor position
a is used for appending and will enter insertion mode after the cursor position
A is used for appending and will enter insertion mode at the end of the current line
c is used for changing text. For example, use cw to change the current word, c$ to change until the end of the line, and c0 to change text from the cursor to the beginning of the line
The general form of a vi command is (command)(number)(text object). For example, y3w copies 3 words. y (yank) is the command, 3 is the number (how many times to repeat the command), and w (word) is the text object to act on
cc - change the entire current line
S - change the entire current line
C - replace characters from the current position to the end of the line.
r - replace the character at the cursor position
R - enter REPLACE mode. Anything you type will replace what's on the screen until you use esc to return to command mode
~ changes the case of a letter
dd deletes the current line
D deletes from the cursor position to the end of the current line
x deletes a single character
quick way to transpose two letters - xp to delete the current letter and put it after the cursor
yy yanks the entire current line, just like Y
Y yanks the entire current line, just like yy
. repeates your last command
u undos the effects of your last command
I begins insertion at the beginning of the current line
o opens a blank line beneath the cursor
O opens a blank line above the cursor
J joins the current line with the next line
ctrl-f scrolls forward by a full screen
ctrl-d scrolls forward by half a screen
ctrl-b scrolls backward by a full screen
ctrl-u scrolls backward by half a screen
z repositions the current line to be at the top of the screen
z. repositions the the current line to be at the center of the screen
z- repositions the current line to be at the bottom of the screen
nz repositions line n to be at the top of the screen
nz. repositions line n to be at the middle of the screen
nz- repositions line n to be at the bottom of the screen
ctrl-l redraws the screen. Sometimes messages from your system will be displayed on screen during editing and interfere with your work. This would be a good time to redraw the screen
H moves the cursor to the top line of the screen
L moves the cursor to the bottom line of the screen
M moves the cursor to the middle of the screen 
nH moves the cursor n lines below the top of the screen
nL moves the cursor n lines above the top of the screen
n| moves the cursor to column n of the current line
e moves the cursor to the end of the word. Note that punctuation marks count as their own word!
E moves the cursor to the end of the word, ignoring punctuation marks
( moves the cursor to the beginning of the current sentence
) moves the cursor to the end of the next sentence
{ moves the cursor to the beginning of the current paragraph
} moves the cursor to the end of the next paragraph
[[ moves the cursor to the beginning of the current section
]] moves the cursor to the end of the current section
/pattern will search the file for 'pattern'. Standard regex patterns are supported
after searching for a pattern using /pattern, n will jump forward to the next search result
after searching for a pattern using /pattern, N will jump backward to the previous search result
you can combine searching with commands on text objects. For example, d/pattern will delete text from the current position up until the first occurrence of 'pattern'
fx moves the cursor to the next occurrence of character x in the current line
Fx moves the cursor to the previous occurrence of character x in the current lin
tx moves the cursor to position immediately before the next occurrence of character x in the current line
Tx moves the cursor to the position immediately after the previous occurrence of character x in the current line
; repeats a previous find command in the same direction. Example: fa and then ; will search for the next occurrence of a twice
, repeats a previous find command in the opposite direction. Example: fa and then , will search forwards for a and then backwards for a
use ctrl-g to display the current line number, the total number of lines, and what percentage of the total the current line represents. This information is displayed at the bottom of the screen
vi +n [file] will open a file to line n. If n is larger than the total number of lines the file opens to the last line
vi + [file] will open a file to its last line
vi +/pattern will open a file at the first occurrence of pattern
vi -R [file] will open a file in read-only mode
view [file] will open a file in read-only mode
:wq saves and quits the current file
you can mark your current position with mx, where x can be any character. Then, use 'x to go back to the line where you placed the mark
The ex editor is a line editor predating vim. Did you know that ex is fully integrated into vim? In fact, whenever you use a `:` command in normal mode you're using ex!
How can you define a range of lines for an ex command? Separate the start and the end of the range by a comma. For example, :3,18d will delete lines 3 through 18
How can you move a range of lines from one place to another using ex? Use :x,y,mz where x is the start of the range, y is the end of the range, and z is the destination line number
How can you copy a range of lines from one place to another using ex? Use :x,y,coz where x is the start of the range, y is the end of the range, and z is the destination line number
You can toggle the display of line numbers on the left of the screen using :set number for enabling and :set nonumber for disabling
You can specify ranges in ex using relative line addresses. For example, :5,+10d will delete lines 5 through 15! :
Use a `.` to reference the current line when specifying a line range in ex. For example, :.,+25d will delete the next 25 lines starting at the current line
`t` can be used as a shorthand for `co` for the ex copy command
ex commands can be piped together like unix shell commands
:x writes the current file and quits the editor. Unlike :wq the write only occurs when the file has been modified
:w takes an optional filename argument. If given, the changes are written to a new file. If no argument is provided the changes are written to the original file
The write ex command can also be defined on a line range. For example, :.,$w newfile.txt will write the contents of the current line to the end of the file to a new file called newfile.txt
You can read in the contents of another file to the file currently being edited. :read filename will read in the contents of filename
Use :args to display the list of command line arguments used to launch your current vim session
If you'd like to edit another file after starting your vim sessionuse :e filename. Be sure to save the changes to your current file first!
:e! discards your current edits and returns the most recently saved version of the file
